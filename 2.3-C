#lang eopl


;; Definición de tipos de datos (datatypes)
(define-datatype graph-exp graph?
  (a-graph
   (vertices vertices-exp?)  ; lista de vértices
   (edges edges-exp?)))      ; lista de aristas

(define-datatype vertices-exp vertices-exp?
  (a-vertices
   (nodelist (list-of symbol?))))  ; lista de símbolos (vértices)

(define-datatype edges-exp edges-exp?
  (a-edges
   (edgelist (list-of edge-exp?))))  ; lista de aristas

(define-datatype edge-exp edge-exp?
  (an-edge
   (from symbol?)          ; vértice origen
   (to symbol?)))          ; vértice destino

;; Selectores para vertices-exp utilizando lambda
(define vertices-exp-nodelist
  (lambda (v-exp)
    (cases vertices-exp v-exp
      (a-vertices (nodelist) nodelist))))

;; Selectores para edges-exp utilizando lambda
(define edges-exp-edgelist
  (lambda (e-exp)
    (cases edges-exp e-exp
      (a-edges (edgelist) edgelist))))

;; Selectores para edge-exp utilizando lambda
(define edge-exp-from
  (lambda (edge)
    (cases edge-exp edge
      (an-edge (from to) from))))

(define edge-exp-to
  (lambda (edge)
    (cases edge-exp edge
      (an-edge (from to) to))))

;; Selectores para graph-exp utilizando lambda
(define graph-exp-vertices
  (lambda (g-exp)
    (cases graph-exp g-exp
      (a-graph (vertices edges) vertices))))

(define graph-exp-edges
  (lambda (g-exp)
    (cases graph-exp g-exp
      (a-graph (vertices edges) edges))))

;; Función para desanalizar (unparse) una estructura graph-exp a su representación textual
(define UNPARSEBNF
  (lambda (exp)
    (cases graph-exp exp
      (a-graph (vertices edges)
               (list 'graph
                     (unparse-vertices vertices)
                     (unparse-edges edges))))))

;; Función para desanalizar vertices-exp
(define unparse-vertices
  (lambda (v-exp)
    (cases vertices-exp v-exp
      (a-vertices (nodelist)
                  (list 'vertices (unparse-nodelist nodelist))))))

;; Función auxiliar para desanalizar la lista de nodos
(define unparse-nodelist
  (lambda (lst)
    (cond
      [(null? lst) '()]
      [else (cons (car lst) (unparse-nodelist (cdr lst)))])))

;; Función para desanalizar edges-exp
(define unparse-edges
  (lambda (e-exp)
    (cases edges-exp e-exp
      (a-edges (edgelist)
               (list 'edges (unparse-edgelist edgelist))))))

;; Función auxiliar para desanalizar la lista de aristas
(define unparse-edgelist
  (lambda (lst)
    (cond
      [(null? lst) '()]
      [else (cons (unparse-edge (car lst)) (unparse-edgelist (cdr lst)))])))

;; Función para desanalizar edge-exp
(define unparse-edge
  (lambda (edge)
    (cases edge-exp edge
      (an-edge (from to)
               (list from to)))))

(define filter
  (lambda (pred lst)
    (letrec ((loop
              (lambda (lst acc)
                (if (null? lst)
                    (reverse acc) ;; Revertir el acumulador para mantener el orden original
                    (loop (cdr lst)
                          (if (pred (car lst))
                              (cons (car lst) acc)
                              acc))))))
      (loop lst '()))))


;; Definición de `reverse` usando `letrec`
(define reverse
  (lambda (lst)
    (letrec ((loop
              (lambda (lst acc)
                (if (null? lst)
                    acc
                    (loop (cdr lst) (cons (car lst) acc))))))
      (loop lst '()))))

(define (my-map proc lst)
  (if (null? lst)
      '()  ; Caso base: lista vacía
      (cons (proc (car lst)) (my-map proc (cdr lst)))))  ; 

(define ga
  (a-graph
   (a-vertices '(a b c d))
   (a-edges
    (list (an-edge 'a 'b)
          (an-edge 'c 'd)
          (an-edge 'b 'c)
          (an-edge 'a 'd)
          (an-edge 'c 'a)))))


;;;;;;;;;;;;;;;;;2.3-C

(define vecinos-entrantes
  (lambda (graph nodo)
    (letrec ((edges (graph-exp-edges graph)) ;; Obtener el objeto edges
             (edgelist (edges-exp-edgelist edges)) ;; Obtener la lista de aristas
             ;; Filtrar las aristas cuyo nodo de destino es el nodo dado
             (filtered-edges (filter (lambda (edge)
                                       (eq? (edge-exp-to edge) nodo))
                                   edgelist))) ;; Lista de aristas que terminan en el nodo dado
      ;; Extraer los nodos de origen de las aristas filtradas
      (my-map (lambda (edge) (edge-exp-from edge)) filtered-edges))))




;; Verificación
(newline)
(display "Salidas 2.3-C   vecinos-entrantes  define-datatype")
(newline)

(newline)
(display (vecinos-entrantes ga 'd)) 
(newline)

